

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep  2 11:46:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 1.45
    14                           ; Generated 16/11/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC12F683 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0013                     	;# 
    64  0014                     	;# 
    65  0015                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  008C                     	;# 
    74  008E                     	;# 
    75  008F                     	;# 
    76  0090                     	;# 
    77  0092                     	;# 
    78  0095                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0096                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  009F                     	;# 
    90  0005                     _GPIObits	set	5
    91  001E                     _ADRESH	set	30
    92  001F                     _ADCON0bits	set	31
    93  000B                     _INTCONbits	set	11
    94  000B                     _INTCON	set	11
    95  0010                     _T1CONbits	set	16
    96  0015                     _CCP1CON	set	21
    97  0018                     _WDTCON	set	24
    98  0013                     _CCPR1L	set	19
    99  0012                     _T2CON	set	18
   100  0005                     _GPIO	set	5
   101  0019                     _CMCON0	set	25
   102  001F                     _ADCON0	set	31
   103  000E                     _TMR1L	set	14
   104  000F                     _TMR1H	set	15
   105  000C                     _PIR1bits	set	12
   106  009E                     _ADRESL	set	158
   107  008C                     _PIE1bits	set	140
   108  0092                     _PR2	set	146
   109  0085                     _TRISIObits	set	133
   110  0085                     _TRISIO	set	133
   111  009F                     _ANSELbits	set	159
   112  009F                     _ANSEL	set	159
   113  008F                     _OSCCON	set	143
   114  040B                     _PSA	set	1035
   115                           
   116                           ; #config settings
   117  0000                     
   118                           	psect	cinit
   119  0010                     start_initialization:	
   120  0010                     __initialization:	
   121  0010                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  0010                     __end_of__initialization:	
   125  0010  0183               	clrf	3
   126  0011  2812               	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	cstackCOMMON
   129  0070                     __pcstackCOMMON:	
   130  0070                     ?_isr:	
   131  0070                     ??_isr:	
   132                           ; 1 bytes @ 0x0
   133                           
   134                           
   135                           ; 1 bytes @ 0x0
   136  0070                     	ds	4
   137  0074                     ?___lwmod:	
   138  0074                     ___lwmod@divisor:	
   139                           ; 2 bytes @ 0x4
   140                           
   141                           
   142                           ; 2 bytes @ 0x4
   143  0074                     	ds	2
   144  0076                     ___lwmod@dividend:	
   145                           
   146                           ; 2 bytes @ 0x6
   147  0076                     	ds	2
   148  0078                     ??___lwmod:	
   149                           
   150                           ; 1 bytes @ 0x8
   151  0078                     	ds	1
   152  0079                     ___lwmod@counter:	
   153                           
   154                           ; 1 bytes @ 0x9
   155  0079                     	ds	1
   156                           
   157                           	psect	cstackBANK0
   158  0020                     __pcstackBANK0:	
   159  0020                     ?_main:	
   160  0020                     main@argc:	
   161                           ; 2 bytes @ 0x0
   162                           
   163                           
   164                           ; 2 bytes @ 0x0
   165  0020                     	ds	2
   166  0022                     main@argv:	
   167                           
   168                           ; 2 bytes @ 0x2
   169  0022                     	ds	2
   170  0024                     ??_main:	
   171                           
   172                           ; 1 bytes @ 0x4
   173  0024                     	ds	3
   174  0027                     main@bitValue:	
   175                           
   176                           ; 2 bytes @ 0x7
   177  0027                     	ds	2
   178  0029                     main@adval:	
   179                           
   180                           ; 2 bytes @ 0x9
   181  0029                     	ds	2
   182  002B                     main@minutesCounter:	
   183                           
   184                           ; 2 bytes @ 0xB
   185  002B                     	ds	2
   186  002D                     main@i:	
   187                           
   188                           ; 2 bytes @ 0xD
   189  002D                     	ds	2
   190  002F                     main@secondsCounter:	
   191                           
   192                           ; 2 bytes @ 0xF
   193  002F                     	ds	2
   194                           
   195                           	psect	maintext
   196  0012                     __pmaintext:	
   197 ;;
   198 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   199 ;;
   200 ;; *************** function _main *****************
   201 ;; Defined at:
   202 ;;		line 48 in file "main.c"
   203 ;; Parameters:    Size  Location     Type
   204 ;;  argc            2    0[BANK0 ] int 
   205 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   206 ;; Auto vars:     Size  Location     Type
   207 ;;  secondsCount    2   15[BANK0 ] unsigned int 
   208 ;;  i               2   13[BANK0 ] unsigned int 
   209 ;;  minutesCount    2   11[BANK0 ] unsigned int 
   210 ;;  adval           2    9[BANK0 ] unsigned int 
   211 ;;  bitValue        2    7[BANK0 ] unsigned int 
   212 ;; Return value:  Size  Location     Type
   213 ;;                  2    0[BANK0 ] int 
   214 ;; Registers used:
   215 ;;		wreg, status,2, status,0, pclath, cstack
   216 ;; Tracked objects:
   217 ;;		On entry : B00/0
   218 ;;		On exit  : 0/0
   219 ;;		Unchanged: 0/0
   220 ;; Data sizes:     COMMON   BANK0   BANK1
   221 ;;      Params:         0       4       0
   222 ;;      Locals:         0      10       0
   223 ;;      Temps:          0       3       0
   224 ;;      Totals:         0      17       0
   225 ;;Total ram usage:       17 bytes
   226 ;; Hardware stack levels required when called:    2
   227 ;; This function calls:
   228 ;;		___lwmod
   229 ;; This function is called by:
   230 ;;		Startup code after reset
   231 ;; This function uses a non-reentrant model
   232 ;;
   233                           
   234                           
   235                           ;psect for function _main
   236  0012                     _main:	
   237                           
   238                           ;main.c: 49: unsigned int i;
   239                           ;main.c: 50: unsigned int bitValue;
   240                           ;main.c: 51: unsigned int adval;
   241                           ;main.c: 52: unsigned int secondsCounter;
   242                           ;main.c: 53: unsigned int minutesCounter;
   243                           ;main.c: 56: OSCCON = 0x51;
   244                           
   245                           ;incstack = 0
   246                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   247  0012  3051               	movlw	81
   248  0013  1683               	bsf	3,5	;RP0=1, select bank1
   249  0014  008F               	movwf	15	;volatile
   250                           
   251                           ;main.c: 57: ADCON0 = 0;
   252  0015  1283               	bcf	3,5	;RP0=0, select bank0
   253  0016  019F               	clrf	31	;volatile
   254                           
   255                           ;main.c: 58: ANSEL = 0;
   256  0017  1683               	bsf	3,5	;RP0=1, select bank1
   257  0018  019F               	clrf	31	;volatile
   258                           
   259                           ;main.c: 59: ANSELbits.ADCS = 0b001;
   260  0019  081F               	movf	31,w	;volatile
   261  001A  398F               	andlw	-113
   262  001B  3810               	iorlw	16
   263  001C  009F               	movwf	31	;volatile
   264                           
   265                           ;main.c: 60: ANSELbits.ANS0 = 1;
   266  001D  141F               	bsf	31,0	;volatile
   267                           
   268                           ;main.c: 61: CMCON0 = 7;
   269  001E  3007               	movlw	7
   270  001F  1283               	bcf	3,5	;RP0=0, select bank0
   271  0020  0099               	movwf	25	;volatile
   272                           
   273                           ;main.c: 62: TRISIO = 0x0;
   274  0021  1683               	bsf	3,5	;RP0=1, select bank1
   275  0022  0185               	clrf	5	;volatile
   276                           
   277                           ;main.c: 63: TRISIObits.TRISIO0 = 1;
   278  0023  1405               	bsf	5,0	;volatile
   279                           
   280                           ;main.c: 64: GPIO = 0;
   281  0024  1283               	bcf	3,5	;RP0=0, select bank0
   282  0025  0185               	clrf	5	;volatile
   283                           
   284                           ;main.c: 67: PR2 = 0b00001100;
   285  0026  300C               	movlw	12
   286  0027  1683               	bsf	3,5	;RP0=1, select bank1
   287  0028  0092               	movwf	18	;volatile
   288                           
   289                           ;main.c: 68: T2CON = 0b00000100;
   290  0029  3004               	movlw	4
   291  002A  1283               	bcf	3,5	;RP0=0, select bank0
   292  002B  0092               	movwf	18	;volatile
   293                           
   294                           ;main.c: 69: CCPR1L = 0b00000110;
   295  002C  3006               	movlw	6
   296  002D  0093               	movwf	19	;volatile
   297                           
   298                           ;main.c: 70: WDTCON = 0b00010000;
   299  002E  3010               	movlw	16
   300  002F  0098               	movwf	24	;volatile
   301                           
   302                           ;main.c: 72: PSA = 0;
   303  0030  1683               	bsf	3,5	;RP0=1, select bank1
   304  0031  1181               	bcf	1,3	;volatile
   305                           
   306                           ;main.c: 73: CCP1CON = 0x10;
   307  0032  3010               	movlw	16
   308  0033  1283               	bcf	3,5	;RP0=0, select bank0
   309  0034  0095               	movwf	21	;volatile
   310                           
   311                           ;main.c: 77: T1CONbits.T1CKPS1 = 0;
   312  0035  1290               	bcf	16,5	;volatile
   313                           
   314                           ;main.c: 78: T1CONbits.T1CKPS0 = 0;
   315  0036  1210               	bcf	16,4	;volatile
   316                           
   317                           ;main.c: 79: T1CONbits.T1OSCEN = 1;
   318  0037  1590               	bsf	16,3	;volatile
   319                           
   320                           ;main.c: 80: T1CONbits.nT1SYNC = 1;
   321  0038  1510               	bsf	16,2	;volatile
   322                           
   323                           ;main.c: 81: T1CONbits.TMR1CS = 1;
   324  0039  1490               	bsf	16,1	;volatile
   325                           
   326                           ;main.c: 82: TMR1H = 0xE0;
   327  003A  30E0               	movlw	224
   328  003B  008F               	movwf	15	;volatile
   329                           
   330                           ;main.c: 83: TMR1L = 0;
   331  003C  018E               	clrf	14	;volatile
   332                           
   333                           ;main.c: 86: INTCON = 0;
   334  003D  018B               	clrf	11	;volatile
   335                           
   336                           ;main.c: 87: INTCONbits.TMR0IE = 0;
   337  003E  128B               	bcf	11,5	;volatile
   338                           
   339                           ;main.c: 88: INTCONbits.TMR0IF = 0;
   340  003F  110B               	bcf	11,2	;volatile
   341                           
   342                           ;main.c: 89: PIR1bits.TMR1IF = 0;
   343  0040  100C               	bcf	12,0	;volatile
   344                           
   345                           ;main.c: 90: PIE1bits.TMR1IE = 1;
   346  0041  1683               	bsf	3,5	;RP0=1, select bank1
   347  0042  140C               	bsf	12,0	;volatile
   348                           
   349                           ;main.c: 91: INTCONbits.GIE = 1;
   350  0043  178B               	bsf	11,7	;volatile
   351                           
   352                           ;main.c: 92: INTCONbits.PEIE = 1;
   353  0044  170B               	bsf	11,6	;volatile
   354                           
   355                           ;main.c: 94: ADCON0bits.ADFM = 1;
   356  0045  1283               	bcf	3,5	;RP0=0, select bank0
   357  0046  179F               	bsf	31,7	;volatile
   358                           
   359                           ;main.c: 95: ADCON0bits.VCFG = 0;
   360  0047  131F               	bcf	31,6	;volatile
   361                           
   362                           ;main.c: 96: ADCON0bits.CHS = 0b00;
   363  0048  30F3               	movlw	-13
   364  0049  059F               	andwf	31,f	;volatile
   365                           
   366                           ;main.c: 97: ADCON0bits.ADON = 1;
   367  004A  141F               	bsf	31,0	;volatile
   368                           
   369                           ;main.c: 99: _delay((unsigned long)((5)*(2000000/4000000.0)));
   370  004B  284C               	nop2	;2 cycle nop
   371                           
   372                           ;main.c: 100: for (minutesCounter = 0; minutesCounter < 120; minutesCounter++) {
   373  004C  1283               	bcf	3,5	;RP0=0, select bank0
   374  004D  01AB               	clrf	main@minutesCounter
   375  004E  01AC               	clrf	main@minutesCounter+1
   376  004F  3000               	movlw	0
   377  0050  022C               	subwf	main@minutesCounter+1,w
   378  0051  3078               	movlw	120
   379  0052  1903               	skipnz
   380  0053  022B               	subwf	main@minutesCounter,w
   381  0054  1803               	btfsc	3,0
   382  0055  28F2               	goto	l64
   383  0056                     l766:	
   384                           
   385                           ;main.c: 101: for (secondsCounter = 0; secondsCounter < 240; secondsCounter++)
   386  0056  01AF               	clrf	main@secondsCounter
   387  0057  01B0               	clrf	main@secondsCounter+1
   388  0058  3000               	movlw	0
   389  0059  0230               	subwf	main@secondsCounter+1,w
   390  005A  30F0               	movlw	240
   391  005B  1903               	skipnz
   392  005C  022F               	subwf	main@secondsCounter,w
   393  005D  1803               	btfsc	3,0
   394  005E  28E5               	goto	l796
   395  005F                     l772:	
   396                           
   397                           ;main.c: 102: {
   398                           ;main.c: 103: if ((secondsCounter % 5) == 0)
   399  005F  3005               	movlw	5
   400  0060  00F4               	movwf	___lwmod@divisor
   401  0061  3000               	movlw	0
   402  0062  00F5               	movwf	___lwmod@divisor+1
   403  0063  0830               	movf	main@secondsCounter+1,w
   404  0064  00F7               	movwf	___lwmod@dividend+1
   405  0065  082F               	movf	main@secondsCounter,w
   406  0066  00F6               	movwf	___lwmod@dividend
   407  0067  20F5               	fcall	___lwmod
   408  0068  0874               	movf	?___lwmod,w
   409  0069  0475               	iorwf	?___lwmod+1,w
   410  006A  1D03               	btfss	3,2
   411  006B  2880               	goto	l780
   412                           
   413                           ;main.c: 104: {
   414                           ;main.c: 105: ADCON0bits.GO_nDONE = 1;
   415  006C  1283               	bcf	3,5	;RP0=0, select bank0
   416  006D  149F               	bsf	31,1	;volatile
   417  006E                     l68:	
   418                           ;main.c: 106: while(ADCON0bits.GO_nDONE){}
   419                           
   420  006E  189F               	btfsc	31,1	;volatile
   421  006F  286E               	goto	l68
   422                           
   423                           ;main.c: 107: adval = ((unsigned int) ((ADRESH << 8) + ADRESL));
   424  0070  081E               	movf	30,w	;volatile
   425  0071  00AA               	movwf	main@adval+1
   426  0072  1683               	bsf	3,5	;RP0=1, select bank1
   427  0073  081E               	movf	30,w	;volatile
   428  0074  1283               	bcf	3,5	;RP0=0, select bank0
   429  0075  00A9               	movwf	main@adval
   430                           
   431                           ;main.c: 108: if (adval >= 553)
   432  0076  3002               	movlw	2
   433  0077  022A               	subwf	main@adval+1,w
   434  0078  3029               	movlw	41
   435  0079  1903               	skipnz
   436  007A  0229               	subwf	main@adval,w
   437  007B  1C03               	skipc
   438  007C  287F               	goto	l71
   439                           
   440                           ;main.c: 109: {
   441                           ;main.c: 110: GPIObits.GP1 = 0;
   442  007D  1085               	bcf	5,1	;volatile
   443                           
   444                           ;main.c: 111: }
   445  007E  2880               	goto	l780
   446  007F                     l71:	
   447                           
   448                           ;main.c: 112: else
   449                           ;main.c: 113: {
   450                           ;main.c: 114: GPIObits.GP1 = 1;
   451  007F  1485               	bsf	5,1	;volatile
   452  0080                     l780:	
   453                           
   454                           ;main.c: 115: }
   455                           ;main.c: 116: }
   456                           ;main.c: 118: for (i = 0; i < 8; i++)
   457  0080  1283               	bcf	3,5	;RP0=0, select bank0
   458  0081  01AD               	clrf	main@i
   459  0082  01AE               	clrf	main@i+1
   460  0083  3000               	movlw	0
   461  0084  022E               	subwf	main@i+1,w
   462  0085  3008               	movlw	8
   463  0086  1903               	skipnz
   464  0087  022D               	subwf	main@i,w
   465  0088  1803               	btfsc	3,0
   466  0089  28D2               	goto	l74
   467  008A                     l786:	
   468                           
   469                           ;main.c: 119: {
   470                           ;main.c: 120: bitValue = 162 & (1 << i);;
   471  008A  0A2D               	incf	main@i,w
   472  008B  00A4               	movwf	??_main
   473  008C  3001               	movlw	1
   474  008D  00A5               	movwf	??_main+1
   475  008E  3000               	movlw	0
   476  008F  00A6               	movwf	??_main+2
   477  0090  2894               	goto	u324
   478  0091                     u325:	
   479  0091  1003               	clrc
   480  0092  0DA5               	rlf	??_main+1,f
   481  0093  0DA6               	rlf	??_main+2,f
   482  0094                     u324:	
   483  0094  0BA4               	decfsz	??_main,f
   484  0095  2891               	goto	u325
   485  0096  30A2               	movlw	162
   486  0097  0525               	andwf	??_main+1,w
   487  0098  00A7               	movwf	main@bitValue
   488  0099  3000               	movlw	0
   489  009A  0526               	andwf	??_main+2,w
   490  009B  00A8               	movwf	main@bitValue+1
   491                           
   492                           ;main.c: 121: if (bitValue == 0) {
   493  009C  0827               	movf	main@bitValue,w
   494  009D  0428               	iorwf	main@bitValue+1,w
   495  009E  1D03               	btfss	3,2
   496  009F  28B2               	goto	l790
   497                           
   498                           ;main.c: 122: CCP1CON = 0x1c;
   499  00A0  301C               	movlw	28
   500  00A1  0095               	movwf	21	;volatile
   501                           
   502                           ;main.c: 123: _delay((unsigned long)((1000)*(2000000/4000000.0)));
   503  00A2  30A6               	movlw	166
   504  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   505  00A4  00A4               	movwf	??_main
   506  00A5                     u387:	
   507  00A5  0BA4               	decfsz	??_main,f
   508  00A6  28A5               	goto	u387
   509                           
   510                           ;main.c: 124: CCP1CON = 0x10;
   511  00A7  3010               	movlw	16
   512  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   513  00A9  0095               	movwf	21	;volatile
   514                           
   515                           ;main.c: 125: _delay((unsigned long)((3000)*(2000000/4000000.0)));
   516  00AA  30D6               	movlw	214
   517  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   518  00AC  00A4               	movwf	??_main
   519  00AD                     u397:	
   520  00AD  28AE               	nop2
   521  00AE  28AF               	nop2
   522  00AF  0BA4               	decfsz	??_main,f
   523  00B0  28AD               	goto	u397
   524                           
   525                           ;main.c: 126: } else {
   526  00B1  28C4               	goto	l76
   527  00B2                     l790:	
   528                           
   529                           ;main.c: 127: CCP1CON = 0x1c;
   530  00B2  301C               	movlw	28
   531  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   532  00B4  0095               	movwf	21	;volatile
   533                           
   534                           ;main.c: 128: _delay((unsigned long)((3000)*(2000000/4000000.0)));
   535  00B5  30D6               	movlw	214
   536  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   537  00B7  00A4               	movwf	??_main
   538  00B8                     u407:	
   539  00B8  28B9               	nop2
   540  00B9  28BA               	nop2
   541  00BA  0BA4               	decfsz	??_main,f
   542  00BB  28B8               	goto	u407
   543                           
   544                           ;main.c: 129: CCP1CON = 0x10;
   545  00BC  3010               	movlw	16
   546  00BD  1283               	bcf	3,5	;RP0=0, select bank0
   547  00BE  0095               	movwf	21	;volatile
   548                           
   549                           ;main.c: 130: _delay((unsigned long)((1000)*(2000000/4000000.0)));
   550  00BF  30A6               	movlw	166
   551  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   552  00C1  00A4               	movwf	??_main
   553  00C2                     u417:	
   554  00C2  0BA4               	decfsz	??_main,f
   555  00C3  28C2               	goto	u417
   556  00C4                     l76:	
   557  00C4  3001               	movlw	1
   558  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   559  00C6  07AD               	addwf	main@i,f
   560  00C7  1803               	skipnc
   561  00C8  0AAE               	incf	main@i+1,f
   562  00C9  3000               	movlw	0
   563  00CA  07AE               	addwf	main@i+1,f
   564  00CB  3000               	movlw	0
   565  00CC  022E               	subwf	main@i+1,w
   566  00CD  3008               	movlw	8
   567  00CE  1903               	skipnz
   568  00CF  022D               	subwf	main@i,w
   569  00D0  1C03               	skipc
   570  00D1  288A               	goto	l786
   571  00D2                     l74:	
   572                           
   573                           ;main.c: 131: }
   574                           ;main.c: 132: }
   575                           ;main.c: 134: if (GPIObits.GP1)
   576  00D2  1885               	btfsc	5,1	;volatile
   577                           
   578                           ;main.c: 135: GPIObits.GP1 = 0;
   579  00D3  1085               	bcf	5,1	;volatile
   580                           
   581                           ;main.c: 138: T1CONbits.TMR1ON = 1;
   582  00D4  1410               	bsf	16,0	;volatile
   583  00D5  0063               	sleep	;# 
   584                           
   585                           ;main.c: 140: T1CONbits.TMR1ON = 0;
   586  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   587  00D7  1010               	bcf	16,0	;volatile
   588  00D8  3001               	movlw	1
   589  00D9  07AF               	addwf	main@secondsCounter,f
   590  00DA  1803               	skipnc
   591  00DB  0AB0               	incf	main@secondsCounter+1,f
   592  00DC  3000               	movlw	0
   593  00DD  07B0               	addwf	main@secondsCounter+1,f
   594  00DE  3000               	movlw	0
   595  00DF  0230               	subwf	main@secondsCounter+1,w
   596  00E0  30F0               	movlw	240
   597  00E1  1903               	skipnz
   598  00E2  022F               	subwf	main@secondsCounter,w
   599  00E3  1C03               	skipc
   600  00E4  285F               	goto	l772
   601  00E5                     l796:	
   602  00E5  3001               	movlw	1
   603  00E6  07AB               	addwf	main@minutesCounter,f
   604  00E7  1803               	skipnc
   605  00E8  0AAC               	incf	main@minutesCounter+1,f
   606  00E9  3000               	movlw	0
   607  00EA  07AC               	addwf	main@minutesCounter+1,f
   608  00EB  3000               	movlw	0
   609  00EC  022C               	subwf	main@minutesCounter+1,w
   610  00ED  3078               	movlw	120
   611  00EE  1903               	skipnz
   612  00EF  022B               	subwf	main@minutesCounter,w
   613  00F0  1C03               	skipc
   614  00F1  2856               	goto	l766
   615  00F2                     l64:	
   616                           
   617                           ;main.c: 141: }
   618                           ;main.c: 142: }
   619                           ;main.c: 144: ADCON0bits.ADON = 0;
   620  00F2  101F               	bcf	31,0	;volatile
   621  00F3  0063               	sleep	;# 
   622                           
   623                           ;main.c: 146: return (0);
   624                           ;	Return value of _main is never used
   625  00F4  280F               	ljmp	start
   626  00F5                     __end_of_main:	
   627                           
   628                           	psect	text1
   629  00F5                     __ptext1:	
   630 ;; *************** function ___lwmod *****************
   631 ;; Defined at:
   632 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  divisor         2    4[COMMON] unsigned int 
   635 ;;  dividend        2    6[COMMON] unsigned int 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  counter         1    9[COMMON] unsigned char 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2    4[COMMON] unsigned int 
   640 ;; Registers used:
   641 ;;		wreg, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1
   647 ;;      Params:         4       0       0
   648 ;;      Locals:         1       0       0
   649 ;;      Temps:          1       0       0
   650 ;;      Totals:         6       0       0
   651 ;;Total ram usage:        6 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; Hardware stack levels required when called:    1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function ___lwmod
   663  00F5                     ___lwmod:	
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   667  00F5  0874               	movf	___lwmod@divisor,w
   668  00F6  0475               	iorwf	___lwmod@divisor+1,w
   669  00F7  1903               	btfsc	3,2
   670  00F8  2922               	goto	l690
   671  00F9  01F9               	clrf	___lwmod@counter
   672  00FA  0AF9               	incf	___lwmod@counter,f
   673  00FB                     l680:	
   674  00FB  1BF5               	btfsc	___lwmod@divisor+1,7
   675  00FC  2909               	goto	l682
   676  00FD  3001               	movlw	1
   677  00FE                     u215:	
   678  00FE  1003               	clrc
   679  00FF  0DF4               	rlf	___lwmod@divisor,f
   680  0100  0DF5               	rlf	___lwmod@divisor+1,f
   681  0101  3EFF               	addlw	-1
   682  0102  1D03               	skipz
   683  0103  28FE               	goto	u215
   684  0104  3001               	movlw	1
   685  0105  00F8               	movwf	??___lwmod
   686  0106  0878               	movf	??___lwmod,w
   687  0107  07F9               	addwf	___lwmod@counter,f
   688  0108  28FB               	goto	l680
   689  0109                     l682:	
   690  0109  0875               	movf	___lwmod@divisor+1,w
   691  010A  0277               	subwf	___lwmod@dividend+1,w
   692  010B  1D03               	skipz
   693  010C  290F               	goto	u235
   694  010D  0874               	movf	___lwmod@divisor,w
   695  010E  0276               	subwf	___lwmod@dividend,w
   696  010F                     u235:	
   697  010F  1C03               	skipc
   698  0110  2917               	goto	l686
   699  0111  0874               	movf	___lwmod@divisor,w
   700  0112  02F6               	subwf	___lwmod@dividend,f
   701  0113  0875               	movf	___lwmod@divisor+1,w
   702  0114  1C03               	skipc
   703  0115  03F7               	decf	___lwmod@dividend+1,f
   704  0116  02F7               	subwf	___lwmod@dividend+1,f
   705  0117                     l686:	
   706  0117  3001               	movlw	1
   707  0118                     u245:	
   708  0118  1003               	clrc
   709  0119  0CF5               	rrf	___lwmod@divisor+1,f
   710  011A  0CF4               	rrf	___lwmod@divisor,f
   711  011B  3EFF               	addlw	-1
   712  011C  1D03               	skipz
   713  011D  2918               	goto	u245
   714  011E  3001               	movlw	1
   715  011F  02F9               	subwf	___lwmod@counter,f
   716  0120  1D03               	btfss	3,2
   717  0121  2909               	goto	l682
   718  0122                     l690:	
   719  0122  0877               	movf	___lwmod@dividend+1,w
   720  0123  00F5               	movwf	?___lwmod+1
   721  0124  0876               	movf	___lwmod@dividend,w
   722  0125  00F4               	movwf	?___lwmod
   723  0126  0008               	return
   724  0127                     __end_of___lwmod:	
   725                           
   726                           	psect	text2
   727  0127                     __ptext2:	
   728 ;; *************** function _isr *****************
   729 ;; Defined at:
   730 ;;		line 36 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, status,2
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1
   744 ;;      Params:         0       0       0
   745 ;;      Locals:         0       0       0
   746 ;;      Temps:          4       0       0
   747 ;;      Totals:         4       0       0
   748 ;;Total ram usage:        4 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; This function calls:
   751 ;;		Nothing
   752 ;; This function is called by:
   753 ;;		Interrupt level 1
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           
   758                           ;psect for function _isr
   759  0127                     _isr:	
   760                           
   761                           ;main.c: 37: if (PIR1bits.TMR1IF == 1)
   762  0127  1C0C               	btfss	12,0	;volatile
   763  0128  292D               	goto	i1l58
   764                           
   765                           ;main.c: 38: {
   766                           ;main.c: 39: PIR1bits.TMR1IF = 0;
   767  0129  100C               	bcf	12,0	;volatile
   768                           
   769                           ;main.c: 40: TMR1H = 0xE0;
   770  012A  30E0               	movlw	224
   771  012B  008F               	movwf	15	;volatile
   772                           
   773                           ;main.c: 41: TMR1L = 0;
   774  012C  018E               	clrf	14	;volatile
   775  012D                     i1l58:	
   776  012D  0873               	movf	??_isr+3,w
   777  012E  00FF               	movwf	127
   778  012F  0872               	movf	??_isr+2,w
   779  0130  008A               	movwf	10
   780  0131  0871               	movf	??_isr+1,w
   781  0132  0084               	movwf	4
   782  0133  0E70               	swapf	??_isr^(0+-128),w
   783  0134  0083               	movwf	3
   784  0135  0EFE               	swapf	126,f
   785  0136  0E7E               	swapf	126,w
   786  0137  0009               	retfie
   787  0138                     __end_of_isr:	
   788  007E                     btemp	set	126	;btemp
   789  007E                     wtemp0	set	126
   790                           
   791                           	psect	intentry
   792  0004                     __pintentry:	
   793                           ;incstack = 0
   794                           ; Regs used in _isr: [wreg+status,2]
   795                           
   796  0004                     interrupt_function:	
   797  007E                     saved_w	set	btemp
   798  0004  00FE               	movwf	btemp
   799  0005  0E03               	swapf	3,w
   800  0006  00F0               	movwf	??_isr
   801  0007  0804               	movf	4,w
   802  0008  00F1               	movwf	??_isr+1
   803  0009  080A               	movf	10,w
   804  000A  00F2               	movwf	??_isr+2
   805  000B  1283               	bcf	3,5	;RP0=0, select bank0
   806  000C  087F               	movf	btemp+1,w
   807  000D  00F3               	movwf	??_isr+3
   808  000E  2927               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     17      17
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lwmod

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    13      4     493
                                              0 BANK0     17    13      4
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     265
                                              4 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwmod

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      11       4       21.2%
BANK1               20      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep  2 11:46:04 2018

            __CFG_CP$OFF 0000                       l71 007F                       l64 00F2  
                     l74 00D2                       l76 00C4                       l68 006E  
                    l680 00FB                      l682 0109                      l690 0122  
                    l780 0080                      l772 005F                      l686 0117  
                    l790 00B2                      l766 0056                      l786 008A  
                    l796 00E5                      u215 00FE                      u235 010F  
                    u324 0094                      u245 0118                      u325 0091  
                    _PR2 0092                      u407 00B8                      u417 00C2  
           __CFG_CPD$OFF 0000                      u387 00A5                      u397 00AD  
                    _PSA 040B                      _isr 0127                      fsr0 0004  
                   ?_isr 0070                     _GPIO 0005                     i1l58 012D  
                   _main 0012                     btemp 007E                     start 000F  
          __CFG_IESO$OFF 0000             main@bitValue 0027                    ??_isr 0070  
                  ?_main 0020            __CFG_WDTE$OFF 0000                    _ANSEL 009F  
                  _T2CON 0012          __end_of___lwmod 0127                    _TMR1H 000F  
                  _TMR1L 000E           __CFG_FCMEN$OFF 0000                    main@i 002D  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 0010  
           __end_of_main 00F5                   ??_main 0024                   _ADCON0 001F  
                 _ADRESH 001E                   _ADRESL 009E                   _CCPR1L 0013  
                 _CMCON0 0019                   _INTCON 000B                   _OSCCON 008F  
                 _WDTCON 0018                   _TRISIO 0085           __CFG_PWRTE$OFF 0000  
              ??___lwmod 0078                   saved_w 007E  __end_of__initialization 0010  
         __pcstackCOMMON 0070               __pmaintext 0012               __pintentry 0004  
                _CCP1CON 0015                  ___lwmod 00F5                _ANSELbits 009F  
                __ptext1 00F5                  __ptext2 0127                _T1CONbits 0010  
           __size_of_isr 0011     end_of_initialization 0010      start_initialization 0010  
            __end_of_isr 0138       main@minutesCounter 002B       main@secondsCounter 002F  
              ___latbits 0000            __pcstackBANK0 0020                 ?___lwmod 0074  
      interrupt_function 0004                 _GPIObits 0005                 _PIE1bits 008C  
               _PIR1bits 000C               _ADCON0bits 001F                main@adval 0029  
       __size_of___lwmod 0032            __size_of_main 00E3                 main@argc 0020  
               main@argv 0022               _INTCONbits 000B                 intlevel1 0000  
       ___lwmod@dividend 0076          ___lwmod@divisor 0074          ___lwmod@counter 0079  
     __CFG_FOSC$INTOSCIO 0000               _TRISIObits 0085  
